%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Tue Feb  2 22:54:14 2016
%%Title: /home/shah/proj/avrtest/test01.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
gsave
false true false false 202.222224 [(ATtiny2313) ] 0 46200 49400 180.555557 text
grestore
46400 49000 46700 49000 10 line
gsave
false true false false 161.777776 [(20) ] 0 46600 49000 144.444443 text
grestore
gsave
false true false false 161.777776 [(VCC) ] 0 46100 49000 144.444443 text
grestore
42700 45200 46200 45200 10 line
46200 45200 46200 49300 10 line
46200 49300 42700 49300 10 line
42700 49300 42700 45200 10 line
46400 48600 46700 48600 10 line
gsave
false true false false 161.777776 [(19) ] 0 46600 48600 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB7 \(UCSK/SCL/PCINT7\)) ] 0 46100 48600 144.444443 text
grestore
46400 48200 46700 48200 10 line
gsave
false true false false 161.777776 [(18) ] 0 46600 48200 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB6 \(MISO/DO/PCINT6\)) ] 0 46100 48200 144.444443 text
grestore
46400 47800 46700 47800 10 line
gsave
false true false false 161.777776 [(17) ] 0 46600 47800 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB5 \(MOSI/DI/SDA/PCINT5\)) ] 0 46100 47800 144.444443 text
grestore
46400 47400 46700 47400 10 line
gsave
false true false false 161.777776 [(16) ] 0 46600 47400 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB4 \(OC1B/PCINT4\)) ] 0 46100 47400 144.444443 text
grestore
46400 47000 46700 47000 10 line
gsave
false true false false 161.777776 [(15) ] 0 46600 47000 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB3 \(OC1A/PCINT3\)) ] 0 46100 47000 144.444443 text
grestore
46400 46600 46700 46600 10 line
gsave
false true false false 161.777776 [(14) ] 0 46600 46600 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB2 \(OC0A/PCINT2\)) ] 0 46100 46600 144.444443 text
grestore
46400 46200 46700 46200 10 line
gsave
false true false false 161.777776 [(13) ] 0 46600 46200 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB1 \(AIN1/PCINT1\)) ] 0 46100 46200 144.444443 text
grestore
46400 45800 46700 45800 10 line
gsave
false true false false 161.777776 [(12) ] 0 46600 45800 144.444443 text
grestore
gsave
false true false false 161.777776 [(PB0 \(AIN0/PCINT0\)) ] 0 46100 45800 144.444443 text
grestore
46400 45400 46700 45400 10 line
gsave
false true false false 161.777776 [(11) ] 0 46600 45400 144.444443 text
grestore
gsave
false true false false 161.777776 [(PD6 \(ICP\)) ] 0 46100 45400 144.444443 text
grestore
42500 45400 42200 45400 10 line
gsave
false false false false 161.777776 [(10) ] 0 42300 45400 144.444443 text
grestore
gsave
false false false false 161.777776 [(GND) ] 0 42755 45395 144.444443 text
grestore
42500 45800 42200 45800 10 line
gsave
false false false false 161.777776 [(9) ] 0 42300 45800 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD5 \(OC0B/T1\)) ] 0 42755 45795 144.444443 text
grestore
42500 46200 42200 46200 10 line
gsave
false false false false 161.777776 [(8) ] 0 42300 46200 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD4 \(T0\)) ] 0 42755 46195 144.444443 text
grestore
42500 46600 42200 46600 10 line
gsave
false false false false 161.777776 [(7) ] 0 42300 46600 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD3 \(INT1\)) ] 0 42755 46595 144.444443 text
grestore
42500 47000 42200 47000 10 line
gsave
false false false false 161.777776 [(6) ] 0 42300 47000 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD2 \(CKOUT/XCK/INT0\)) ] 0 42755 46995 144.444443 text
grestore
42500 47400 42200 47400 10 line
gsave
false false false false 161.777776 [(5) ] 0 42300 47400 144.444443 text
grestore
gsave
false false false false 161.777776 [(PA0 \(XTAL1\)) ] 0 42755 47395 144.444443 text
grestore
42500 47800 42200 47800 10 line
gsave
false false false false 161.777776 [(4) ] 0 42300 47800 144.444443 text
grestore
gsave
false false false false 161.777776 [(PA1 \(XTAL2\)) ] 0 42755 47795 144.444443 text
grestore
42500 48200 42200 48200 10 line
gsave
false false false false 161.777776 [(3) ] 0 42300 48200 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD1 \(TXD\)) ] 0 42755 48195 144.444443 text
grestore
42500 48600 42200 48600 10 line
gsave
false false false false 161.777776 [(2) ] 0 42300 48600 144.444443 text
grestore
gsave
false false false false 161.777776 [(PD0 \(RXD\)) ] 0 42755 48595 144.444443 text
grestore
42500 49000 42200 49000 10 line
gsave
false false false false 161.777776 [(1) ] 0 42300 49000 144.444443 text
grestore
gsave
false false false false 161.777776 [(PA2 \(RESET/dW\)) ] 0 42755 48995 144.444443 text
grestore
46300 45400 100 0 360 10 darc
46300 45800 100 0 360 10 darc
46300 46200 100 0 360 10 darc
46300 46600 100 0 360 10 darc
46300 47000 100 0 360 10 darc
46300 47400 100 0 360 10 darc
46300 47800 100 0 360 10 darc
46300 48200 100 0 360 10 darc
46300 48600 100 0 360 10 darc
46300 49000 100 0 360 10 darc
42600 49000 100 0 360 10 darc
42600 48600 100 0 360 10 darc
42600 48200 100 0 360 10 darc
42600 47800 100 0 360 10 darc
42600 47400 100 0 360 10 darc
42600 47000 100 0 360 10 darc
42600 46600 100 0 360 10 darc
42600 46200 100 0 360 10 darc
42600 45800 100 0 360 10 darc
42600 45400 100 0 360 10 darc
60 60 46670 48570 fbox
60 60 46670 48170 fbox
60 60 46670 47770 fbox
60 60 46670 47370 fbox
60 60 46670 46970 fbox
60 60 46670 46170 fbox
60 60 42170 47370 fbox
60 60 42170 47770 fbox
60 60 42170 48970 fbox
grestore
gsave
false false false false 202.222224 [(AVR) ] 0 42700 49400 180.555557 text
grestore
gsave
40800 48600 41000 48600 10 line
41700 48600 41500 48600 10 line
41200 48700 41300 48600 10 line
41300 48600 41200 48500 10 line
41200 48700 41200 48500 10 line
41300 48700 41300 48500 10 line
41300 48600 41500 48600 10 line
41200 48600 41000 48600 10 line
41230 48740 41330 48840 10 line
41330 48840 41280 48810 10 line
41330 48840 41300 48790 10 line
41300 48740 41400 48840 10 line
41400 48840 41350 48810 10 line
41400 48840 41370 48790 10 line
grestore
gsave
false false false false 202.222224 [(VD0) ] 0 41600 48800 180.555557 text
grestore
gsave
40800 48200 41000 48200 10 line
41700 48200 41500 48200 10 line
41200 48300 41300 48200 10 line
41300 48200 41200 48100 10 line
41200 48300 41200 48100 10 line
41300 48300 41300 48100 10 line
41300 48200 41500 48200 10 line
41200 48200 41000 48200 10 line
41230 48340 41330 48440 10 line
41330 48440 41280 48410 10 line
41330 48440 41300 48390 10 line
41300 48340 41400 48440 10 line
41400 48440 41350 48410 10 line
41400 48440 41370 48390 10 line
newpath
40800 48200
25
0 360 arc
fill
newpath
40800 48200
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(VD1) ] 0 41600 48400 180.555557 text
grestore
gsave
40800 47000 41000 47000 10 line
41700 47000 41500 47000 10 line
41200 47100 41300 47000 10 line
41300 47000 41200 46900 10 line
41200 47100 41200 46900 10 line
41300 47100 41300 46900 10 line
41300 47000 41500 47000 10 line
41200 47000 41000 47000 10 line
41230 47140 41330 47240 10 line
41330 47240 41280 47210 10 line
41330 47240 41300 47190 10 line
41300 47140 41400 47240 10 line
41400 47240 41350 47210 10 line
41400 47240 41370 47190 10 line
newpath
40800 47000
25
0 360 arc
fill
newpath
40800 47000
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(VD2) ] 0 41600 47200 180.555557 text
grestore
gsave
40800 46600 41000 46600 10 line
41700 46600 41500 46600 10 line
41200 46700 41300 46600 10 line
41300 46600 41200 46500 10 line
41200 46700 41200 46500 10 line
41300 46700 41300 46500 10 line
41300 46600 41500 46600 10 line
41200 46600 41000 46600 10 line
41230 46740 41330 46840 10 line
41330 46840 41280 46810 10 line
41330 46840 41300 46790 10 line
41300 46740 41400 46840 10 line
41400 46840 41350 46810 10 line
41400 46840 41370 46790 10 line
newpath
40800 46600
25
0 360 arc
fill
newpath
40800 46600
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(VD3) ] 0 41600 46800 180.555557 text
grestore
gsave
40800 46200 41000 46200 10 line
41700 46200 41500 46200 10 line
41200 46300 41300 46200 10 line
41300 46200 41200 46100 10 line
41200 46300 41200 46100 10 line
41300 46300 41300 46100 10 line
41300 46200 41500 46200 10 line
41200 46200 41000 46200 10 line
41230 46340 41330 46440 10 line
41330 46440 41280 46410 10 line
41330 46440 41300 46390 10 line
41300 46340 41400 46440 10 line
41400 46440 41350 46410 10 line
41400 46440 41370 46390 10 line
newpath
40800 46200
25
0 360 arc
fill
newpath
40800 46200
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(VD4) ] 0 41600 46400 180.555557 text
grestore
gsave
40800 45800 41000 45800 10 line
41700 45800 41500 45800 10 line
41200 45900 41300 45800 10 line
41300 45800 41200 45700 10 line
41200 45900 41200 45700 10 line
41300 45900 41300 45700 10 line
41300 45800 41500 45800 10 line
41200 45800 41000 45800 10 line
41230 45940 41330 46040 10 line
41330 46040 41280 46010 10 line
41330 46040 41300 45990 10 line
41300 45940 41400 46040 10 line
41400 46040 41350 46010 10 line
41400 46040 41370 45990 10 line
newpath
40800 45800
25
0 360 arc
fill
newpath
40800 45800
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(VD5) ] 0 41600 46000 180.555557 text
grestore
gsave
48000 45400 47800 45400 10 line
47100 45400 47300 45400 10 line
47600 45300 47500 45400 10 line
47500 45400 47600 45500 10 line
47600 45300 47600 45500 10 line
47500 45300 47500 45500 10 line
47500 45400 47300 45400 10 line
47600 45400 47800 45400 10 line
47570 45260 47470 45160 10 line
47470 45160 47520 45190 10 line
47470 45160 47500 45210 10 line
47500 45260 47400 45160 10 line
47400 45160 47450 45190 10 line
47400 45160 47430 45210 10 line
newpath
48000 45400
25
0 360 arc
fill
newpath
48000 45400
25
0 360 arc
fill
grestore
gsave
false true false true 202.222224 [(VD6) ] 0 47200 45200 180.555557 text
grestore
41700 48600 42200 48600 10 line
41700 48200 42200 48200 10 line
41700 47000 42200 47000 10 line
41700 46600 42200 46600 10 line
41700 46200 42200 46200 10 line
41700 45800 42200 45800 10 line
46700 45400 47100 45400 10 line
40800 44800 40800 48600 10 line
40800 44800 48000 44800 10 line
48000 44800 48000 46600 10 line
48000 46600 46700 46600 10 line
gsave
47500 48100 47500 48300 10 line
47500 49000 47500 48800 10 line
47300 48500 47700 48500 10 line
47300 48600 47700 48600 10 line
47500 48800 47500 48600 10 line
47500 48500 47500 48300 10 line
newpath
47500 49000
25
0 360 arc
fill
newpath
47500 49000
25
0 360 arc
fill
grestore
gsave
false false false false 202.222224 [(1uF) ] 90 47200 48300 180.555557 text
grestore
46700 49000 48200 49000 10 line
gsave
47500 47900 47500 48100 10 line
47400 47900 47600 47900 10 line
47455 47850 47545 47850 10 line
47480 47810 47520 47810 10 line
grestore
gsave
42200 45200 42200 45400 10 line
42100 45200 42300 45200 10 line
42155 45150 42245 45150 10 line
42180 45110 42220 45110 10 line
grestore
gsave
48200 49000 48200 48800 10 line
gsave
false true false false 161.777776 [(1) ] 270 48250 48850 144.444443 text
grestore
48200 48100 48200 48300 10 line
gsave
false false false false 161.777776 [(2) ] 270 48250 48250 144.444443 text
grestore
48400 48700 48000 48700 10 line
48300 48600 48100 48600 10 line
48400 48500 48000 48500 10 line
48300 48400 48100 48400 10 line
48200 48300 48200 48400 10 line
48200 48800 48200 48700 10 line
grestore
gsave
false false false false 202.222224 [(3V) ] 270 48500 48700 180.555557 text
grestore
gsave
48200 47900 48200 48100 10 line
48100 47900 48300 47900 10 line
48155 47850 48245 47850 10 line
48180 47810 48220 47810 10 line
grestore
gsave
48900 45800 30 0 360 10 darc
49300 45800 30 0 360 10 darc
48700 45800 48870 45800 10 line
49500 45800 49330 45800 10 line
48850 45900 49350 45900 10 line
49100 45900 49100 46000 10 line
newpath
48700 45800
25
0 360 arc
fill
grestore
gsave
49600 45200 49400 45200 10 line
48700 45200 48900 45200 10 line
49200 45000 49200 45400 10 line
49100 45000 49100 45400 10 line
48900 45200 49100 45200 10 line
49200 45200 49400 45200 10 line
newpath
49600 45200
25
0 360 arc
fill
newpath
49600 45200
25
0 360 arc
fill
grestore
gsave
false true false true 202.222224 [(0.1uF) ] 0 49400 44900 180.555557 text
grestore
gsave
49600 44600 49600 44800 10 line
49500 44600 49700 44600 10 line
49555 44550 49645 44550 10 line
49580 44510 49620 44510 10 line
grestore
46700 45800 48700 45800 10 line
48700 45800 48700 45200 10 line
49500 45800 49600 45800 10 line
49600 44800 49600 45800 10 line
60 60 46670 48570 fbox
60 60 46670 48170 fbox
60 60 46670 47770 fbox
60 60 46670 47370 fbox
60 60 46670 46970 fbox
60 60 46670 46170 fbox
60 60 42170 47370 fbox
60 60 42170 47770 fbox
60 60 42170 48970 fbox
newpath
40800 48200
25
0 360 arc
fill
newpath
40800 48200
25
0 360 arc
fill
newpath
40800 47000
25
0 360 arc
fill
newpath
40800 47000
25
0 360 arc
fill
newpath
40800 46600
25
0 360 arc
fill
newpath
40800 46600
25
0 360 arc
fill
newpath
40800 46200
25
0 360 arc
fill
newpath
40800 46200
25
0 360 arc
fill
newpath
40800 45800
25
0 360 arc
fill
newpath
40800 45800
25
0 360 arc
fill
newpath
48000 45400
25
0 360 arc
fill
newpath
48000 45400
25
0 360 arc
fill
newpath
40800 48200
25
0 360 arc
fill
newpath
40800 47000
25
0 360 arc
fill
newpath
40800 46600
25
0 360 arc
fill
newpath
40800 46200
25
0 360 arc
fill
newpath
40800 45800
25
0 360 arc
fill
newpath
48000 45400
25
0 360 arc
fill
newpath
47500 49000
25
0 360 arc
fill
newpath
47500 49000
25
0 360 arc
fill
newpath
47500 49000
25
0 360 arc
fill
newpath
48700 45800
25
0 360 arc
fill
newpath
49600 45200
25
0 360 arc
fill
newpath
49600 45200
25
0 360 arc
fill
newpath
48700 45800
25
0 360 arc
fill
newpath
48700 45800
25
0 360 arc
fill
newpath
49600 45200
25
0 360 arc
fill
showpage
%%End
